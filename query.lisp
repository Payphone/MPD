;;; query.lisp

(in-package #:mpd)

(defclass song ()
  ((filename :initarg :filename :accessor filename)
   (last-modified :initarg :last-modified :accessor last-modified)
   (artist :initarg :artist :accessor artist)
   (album-artist :initarg :album-artist :accessor album-artist)
   (title :initarg :title :accessor title)
   (album :initarg :album :accessor album)
   (track :initarg :track :accessor track)
   (date :initarg :date :accessor date)
   (composer :initarg :composer :accessor composer)
   (performer :initarg :performer :accessor performer)
   (comment :initarg :comment :accessor comment)
   (genre :initarg :genre :accessor genre)
   (disc :initarg :disc :accessor disc)
   (current-time :initarg :current-time :accessor current-time)
   (duration :initarg :duration :accessor duration)
   (position :initarg :position :accessor pos)
   (id :initarg :id :accessor id)))

(defclass status ()
  ((volume :initarg :volume :accessor volume)
   (repeatp :initarg :repeatp :accessor repeatp)
   (randomp :initarg :randomp :accessor randomp)
   (singlep :initarg :singlep :accessor singlep)
   (consumep :initarg :consumep :accessor consumep)
   (playlist :initarg :playlist :accessor playlist)
   (playlist-length :initarg :playlist-length :accessor playlist-length)
   (mix-ramp-db :initarg :mix-ramp-db :accessor mix-ramp-db)
   (state :initarg :state :accessor state)
   (song :initarg :song :accessor song)
   (song-id :initarg :song-id :accessor song-id)
   (current-time :initarg :current-time :accessor current-time)
   (elapsed :initarg :elapsed :accessor elapsed)
   (bitrate :initarg :bitrate :accessor bitrate)
   (duration :initarg :duration :accessor duration)
   (audio :initarg :audio :accessor audio)
   (next-song :initarg :next-song :accessor next-song)
   (next-song-id :initarg :next-song-id :accessor next-song-id)))

(defclass statistics ()
  ((uptime :initarg :uptime :accessor uptime)
   (play-time :initarg :play-time :accessor play-time)
   (artists :initarg :artists :accessor artists)
   (albums :initarg :albums :accessor albums)
   (songs :initarg :songs :accessor songs)
   (db-playtime :initarg :db-playtime :accessor db-playtime)
   (db-update :initarg :db-update :accessor db-update)))

(defun query-song (socket)
  "Returns an instance of the current song."
  (let ((song (response->plist (send-command socket "currentsong"))))
    (make-instance 'song
                   :filename      (getf song (intern "FILE"))
                   :last-modified (getf song (intern "LAST-MODIFIED"))
                   :artist        (getf song (intern "ARTIST"))
                   :album-artist  (getf song (intern "ALBUMARTIST"))
                   :title         (getf song (intern "TITLE"))
                   :album         (getf song (intern "ALBUM"))
                   :track         (getf song (intern "TRACK"))
                   :date          (getf song (intern "DATE"))
                   :composer      (getf song (intern "COMPOSER"))
                   :performer     (getf song (intern "PERFORMER"))
                   :comment       (getf song (intern "COMMENT"))
                   :genre         (getf song (intern "GENRE"))
                   :disc          (getf song (intern "DISC"))
                   :current-time  (getf song (intern "TIME"))
                   :duration      (getf song (intern "DURATION"))
                   :position      (getf song (intern "POSITION"))
                   :id            (getf song (intern "ID")))))

(defun query-status (socket)
  "Returns an instance of the current status."
  (let ((status (response->plist (send-command socket "status"))))
    (make-instance 'status
                   :volume          (getf status (intern "VOLUME"))
                   :repeatp         (getf status (intern "REPEATP"))
                   :randomp         (getf status (intern "RANDOMP"))
                   :singlep         (getf status (intern "SINGLEP"))
                   :consumep        (getf status (intern "CONSUMEP"))
                   :playlist        (getf status (intern "PLAYLIST"))
                   :playlist-length (getf status (intern "PLAYLISTLENGTH"))
                   :mix-ramp-db     (getf status (intern "MIX-RAMP-DB"))
                   :state           (getf status (intern "STATE"))
                   :song            (getf status (intern "SONG"))
                   :songid          (getf status (intern "SONGID"))
                   :current-time    (getf status (intern "CURRENT-TIME"))
                   :elapsed         (getf status (intern "ELAPSED"))
                   :bitrate         (getf status (intern "BITRATE"))
                   :duration        (getf status (intern "DURATION"))
                   :audio           (getf status (intern "AUDIO"))
                   :next-song       (getf status (intern "NEXT-SONG"))
                   :next-song-id    (getf status (intern "NEXT-SONG-ID")))))

(defun query-statistics (socket)
  "Returns an instance of the current statistics."
  (let ((stats (response->plist (send-command socket "stats"))))
    (make-instance 'statistics
                   :uptime      (getf stats (intern "UPTIME"))
                   :play-time   (getf stats (intern "PLAY-TIME"))
                   :artists     (getf stats (intern "ARTISTS"))
                   :albums      (getf stats (intern "ALBUMS"))
                   :songs       (getf stats (intern "SONGS"))
                   :db-playtime (getf stats (intern "DB-PLAYTIME"))
                   :db-update   (getf stats (intern "DB-UPDATE")))))
